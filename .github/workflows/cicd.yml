# 작업명
name: CD NCP
on:
  push:
    branches:
      - 'develop'
      - 'main'
jobs:
  CI:
    runs-on: ubuntu-latest
    # 작업 실행 단계
    steps:
      # 체크아웃 및 JDK 세팅
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      # Gradle 권한 부여
      - name: Grant Execute permission for gradlew
        run: chmod +x gradlew
        shell: bash
      # test하지 않고 빌드를 진행
      - name: Build with Gradle
        run: ./gradlew build -x test
        shell: bash
#      # local환경으로 테세트 진행
#      - name: Test with Gradle
#        run: SPRING_PROFILES_ACTIVE=[local] ./gradlew clean test
#        shell: bash

  CD:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Grant Execute permission for gradlew
        run: chmod +x gradlew
        shell: bash
      - name: Build with Gradle
        run: ./gradlew build -x test
        shell: bash
      - name: Login to NCP Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}
      - name: Docker build & push
        if: contains(github.ref, 'main')
        run: |
          docker build -t ${{ secrets.APP_NAME }} .
          docker image tag ${{ secrets.APP_NAME }} ${{ secrets.NCP_CONTAINER_REGISTRY }}/${{ secrets.APP_NAME }}
          docker push ${{ secrets.NCP_CONTAINER_REGISTRY }}/${{ secrets.APP_NAME }}
      - name: connect ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOYMENT_HOST }}
          username: ${{ secrets.DEPLOYMENT_USERNAME }}
          password: ${{ secrets.DEPLOYMENT_PASSWORD }}
          port: ${{ secrets.DEPLOYMENT_PORT }}
          script: |
            docker pull ${{ secrets.NCP_CONTAINER_REGISTRY }}/${{ secrets.APP_NAME }}
            docker stop ${{ secrets.APP_NAME }}
            docker rm ${{ secrets.APP_NAME }}
            docker run --name ${{ secrets.APP_NAME }} -d -p 8080:80 ${{ secrets.NCP_CONTAINER_REGISTRY }}/${{ secrets.APP_NAME }}
            docker image prune -f